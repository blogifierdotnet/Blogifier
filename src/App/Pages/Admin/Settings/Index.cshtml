@page
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = "Settings - General";
}
<div class="bf-main">
    <partial name="~/Pages/Admin/Settings/_Taskbar.cshtml" />
    <div id="app" class="bf-body">
        <form>
            <div class="bf-content bf-content-boxed bf-settings">

                <p v-if="errors.length">
                    <b>Please correct the following error(s):</b>
                    <ul>
                        <li v-for="error in errors">{{ error }}</li>
                    </ul>
                </p>
                <div class="form-group">
                    <label class="form-group-label">@Localizer["title"]</label>
                    <input v-model="blog.title" type="text" id="txtTitle" name="txtTitle" class="form-control" />
                </div>
                <div class="form-group">
                    <label class="form-group-label">@Localizer["description"]</label>
                    <textarea v-model="blog.description" id="txtDescription" name="txtDescription" type="text" class="form-control"></textarea>
                </div>
                <div class="form-group">
                    <label class="form-group-label">@Localizer["items-per-page"]</label>
                    <input v-model.number="blog.itemsPerPage" type="text" id="txtItemsPerPage" name="txtItemsPerPage" class="form-control" />
                </div>
                <div class="form-group">
                    <label class="form-group-label">@Localizer["logo"]</label>
                    <div class="input-group">
                        <input v-model="blog.logo" type="text" id="txtLogo" name="txtLogo" class="form-control" readonly />
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-secondary btn-upload" onclick="return fileManagerController.open(updateAppLogoCallback);"> @Localizer["select"]</button>
                        </span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="form-group-label">@Localizer["cover"]</label>
                    <div class="input-group">
                        <input v-model="blog.cover" type="text" id="txtCover" name="txtCover" class="form-control" readonly />
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-secondary btn-upload" onclick="return fileManagerController.open(updateAppCoverCallback);"> @Localizer["select"]</button>
                        </span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="form-group-label">@Localizer["language"]</label>
                    <select class="form-control" v-model="blog.culture">
                        <option v-for="option in cultures" v-bind:value="option.value">
                            {{ option.text }}
                        </option>
                    </select>
                </div>
                <button type="button" v-on:click="save" class="btn btn-primary btn-main">@Localizer["save"]</button>

            </div>
        </form>
    </div>
</div>
<partial name="~/Pages/Admin/Shared/_FileMgr.cshtml" />

@section Scripts{
    <script src="~/admin/js/app/fileManagerController.js"></script>
    <script>
        const app = new Vue({
            el: '#app',
            data: {
                errors: [],
                blog: {},
                cultures: {}
            },
            methods: {
                load: function () {
                    axios.get(webRoot + 'api/settings')
                        .then(response => { this.blog = response.data; this.loadCultures() })
                        .catch(function (error) { toastr.error(error); });
                },
                loadCultures: function () {
                    axios.get(webRoot + 'api/settings/cultures')
                        .then(response => { this.cultures = response.data })
                        .catch(function (error) { toastr.error(error); });
                },
                save: function () {
                    this.errors = [];

                    if (!this.blog.title) {
                        this.errors.push('Title is required.');
                    }
                    if (!this.blog.description) {
                        this.errors.push('Description is required.');
                    }
                    if (!Number.isInteger(this.blog.itemsPerPage)) {
                        this.errors.push('Items per page must be a number.');
                    }

                    if (this.errors.length === 0) {
                        axios.post(webRoot + 'api/settings', this.blog)
                            .then(function (response) {
                                toastr.success('Updated');
                            })
                            .catch(function (error) {
                                toastr.error(error);
                            });
                    }
                }
            },
            beforeMount() {
                this.load()
            }
        })
    </script>
}