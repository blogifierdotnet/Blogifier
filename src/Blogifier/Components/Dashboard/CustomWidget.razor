@using Blogifier.Components.Editor

@inject IJSRuntime JSRuntime
@inject IJsonStringLocalizer<CustomWidget> Localizer
@inject IToaster Toaster

@inject IHttpContextAccessor HttpContextAccessor
@inject CustomHttpClient Http

@if(FieldValue != null)
{
    <div class="app-widget app-widget-custom">
        <div class="card-body">
            @((MarkupString)@FieldValue.MdToHtml())
            <button class="btn primary" style="float:right; position: relative; top: -20px" @onclick="ShowEditor"><span class="oi oi-pencil"></span></button>
        </div>
    </div>
}

@if (Visible)
{
    <div class="editor-modal-bg">
        <div class="editor-modal-content">
            <div class="modal-actions">
                <div class="btn-group post-options" style="position: relative" role="group" aria-label="Post options">
                    <button class="btn btn-secondary" @onclick="Save" @onclick:preventDefault>
                        <span class="oi oi-check"></span> @Localizer["save"]
                    </button>
                    <button class="btn btn-secondary btn-close" @onclick="HideEditor">
                        <span class="oi oi-x"></span>
                    </button>
                </div>
            </div>
            <div class="profile-outer" style="padding: 10px; width: 100%; height: 410px">
                <MarkdownEditor Content="@FieldValue" />
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private string FieldKey = "admin-dashboard-sidebar";
    protected bool Visible { get; set; }
    protected string FieldValue { get; set; }
    protected HttpRequest Request { get; set; }

    protected void ShowEditor()
    {
        Visible = true;
        StateHasChanged();
    }

    protected void HideEditor()
    {
        Visible = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Request = HttpContextAccessor.HttpContext.Request;

        var field = await Http.GetJsonAsync<CustomField>($"customfields?key={FieldKey}", Request);

        FieldValue = field.Content;
        StateHasChanged();
    }

    protected async Task Save()
    {
        FieldValue = await JSRuntime.InvokeAsync<string>("commonJsFunctions.getEditorValue", "");

        var field = await Http.GetJsonAsync<CustomField>($"customfields?key={FieldKey}", Request);
        field.Content = FieldValue;

        await Http.PostJsonAsync<CustomField>($"customfields", Request, field);

        StateHasChanged();
        Toaster.Success("Updated");
    }
}
