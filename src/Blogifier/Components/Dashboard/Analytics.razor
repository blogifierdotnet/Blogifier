@inject IHttpContextAccessor HttpContextAccessor
@inject CustomHttpClient Http

@if (Labels != null)
{
    <div class="app-widget app-widget-analytics">
        <div class="app-widget-body">
            @if (SelectedChartOption == ChartSelector.Week)
            {
                <Chart Type="ChartType.Bar" Labels="@Labels">
                    <Series Values="@Values" />
                </Chart>
            }
            else
            {
                <Chart Type="ChartType.Line" Labels="@Labels">
                    <Series Values="@Values" />
                </Chart>
            }
            <select @bind="SelectedChartOption" class="custom-select">
                @if (ChartOptions != null)
                {
                    @foreach (var item in ChartOptions)
                    {
                        <option value="@item.Id">@item.Label</option>
                    }
                }
            </select>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected string[] Labels { get; set; }
    protected double[] Values { get; set; }

    protected HttpRequest Request { get; set; }

    protected List<ChartOption> ChartOptions = new List<ChartOption>() {
        new ChartOption { Id = ChartSelector.Week, Label = "Last week" },
        new ChartOption { Id = ChartSelector.Month, Label = "Last month" },
        new ChartOption { Id = ChartSelector.All, Label = "All" }
    };

    private ChartSelector selectedChart;
    public ChartSelector SelectedChartOption
    {
        get { return selectedChart; }
        set
        {
            selectedChart = value;
            Task.Run(() => Load()).Wait();
        }
    }

    protected override void OnInitialized()
    {
        Request = HttpContextAccessor.HttpContext.Request;
        SelectedChartOption = ChartSelector.Week;
    }

    async Task Load()
    {
        if (selectedChart == ChartSelector.Week)
        {
            await LoadWeekly();
        }
        else if (selectedChart == ChartSelector.Month)
        {
            await LoadMonthly();
        }
        else
        {
            await LoadAll();
        }
    }

    async Task LoadWeekly()
    {
        var stats = await GetStats(-7);
        var chartItems = new List<ChartItem>();

        foreach (var stat in stats)
        {
            var date = stat.DateCreated.ToShortDateString();
            var item = chartItems.Where(i => i.Label == date).FirstOrDefault();

            if (item == null)
            {
                chartItems.Add(new ChartItem { Label = date, Value = stat.Total });
            }
            else
            {
                item.Value += stat.Total;
            }
        }

        Labels = chartItems.Select(i => i.Label).ToArray();
        Values = chartItems.Select(i => i.Value).ToArray();
    }

    async Task LoadMonthly()
    {
        var stats = await GetStats(-31);
        var chartItems = new List<ChartItem>();

        foreach (var stat in stats)
        {
            var date = $"{stat.DateCreated.Month}/{stat.DateCreated.Day}";
            var item = chartItems.Where(i => i.Label == date).FirstOrDefault();

            if (item == null)
            {
                chartItems.Add(new ChartItem { Label = date, Value = stat.Total });
            }
            else
            {
                item.Value += stat.Total;
            }
        }

        Labels = chartItems.Select(i => i.Label).ToArray();
        Values = chartItems.Select(i => i.Value).ToArray();
    }

    async Task LoadAll()
    {
        var stats = await GetStats();
        var chartItems = new List<ChartItem>();

        foreach (var stat in stats)
        {
            var date = $"{stat.DateCreated.Month}/{stat.DateCreated.Day}";
            var item = chartItems.Where(i => i.Label == date).FirstOrDefault();

            if (item == null)
            {
                chartItems.Add(new ChartItem { Label = date, Value = stat.Total });
            }
            else
            {
                item.Value += stat.Total;
            }
        }

        Labels = chartItems.Select(i => i.Label).ToArray();
        Values = chartItems.Select(i => i.Value).ToArray();
    }

    async Task<IEnumerable<StatsTotal>> GetStats(int days = 0)
    {
        var result = await Http.GetJsonAsync<IEnumerable<StatsTotal>>($"analytics/totals?days={days}", Request);
        return result;
    }

    async Task LoadLatestPosts()
    {
        var posts = await Http.GetJsonAsync<IEnumerable<BlogPost>>("analytics/latestposts", Request);

        Labels = posts.Select(p => p.Title.Length > 4 ? p.Title.Substring(0, 5) + ".." : p.Title).ToArray();
        Values = posts.Select(p => (double)p.PostViews).ToArray();

        Array.Reverse(Labels);
        Array.Reverse(Values);

        if (Labels.Length > 10)
        {
            int skip = Labels.Length - 10;
            Values = Values.Skip(skip).ToArray();
            Labels = Labels.Skip(skip).ToArray();
        }
    }

}
