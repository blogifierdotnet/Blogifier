@inject IJSRuntime JSRuntime
@inject IJsonStringLocalizer<Counters> Localizer
@inject IHttpContextAccessor HttpContextAccessor
@inject CustomHttpClient Http

@if (Totals != null)
{
    <div class="app-widget-stats row no-gutters">
        <div class="col">
            <div class="app-widget-stats-item">
                <span>@Totals.PostCount</span>
                <span class="app-widget-stats-item-title">@Localizer["posts", true]</span>
            </div>
        </div>
        <div class="col">
            <div class="app-widget-stats-item">
                <span>@Totals.ViewsCount</span>
                <span class="app-widget-stats-item-title">@Localizer["view", true]</span>
            </div>
        </div>
        <div class="col">
            <div class="app-widget-stats-item">
                <span>@Totals.SubsriberCount</span>
                <span class="app-widget-stats-item-title">@Localizer["subscribers", true]</span>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [Parameter]
    public EventCallback<string> OnUpdate { get; set; }
    protected HttpRequest Request { get; set; }

    public Totals Totals { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Request = HttpContextAccessor.HttpContext.Request;
        await Load();
    }

    public async Task Load()
    {
        var authState = await AuthenticationStateTask;
        Totals = await Http.GetJsonAsync<Totals>($"analytics/counts", Request);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeAsync<string>("commonJsFunctions.startClock", "");
    }
}
