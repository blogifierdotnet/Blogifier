@inject ILogger<PostListWidget> Logger
@inject IJsonStringLocalizer<PostListWidget> Localizer
@inject IToaster Toaster
@inject IJSRuntime JSRuntime
@inject CustomHttpClient Http
@inject IHttpContextAccessor HttpContextAccessor

<div class="app-posts pr-0 pr-lg-5">
    @if (pageListModel == null || pageListModel.Posts == null)
    {
        <div class="loading">Loading...</div>
    }
    else
    {
        <div class="app-posts-toolbar d-flex">
            <div class="app-posts-selectall custom-control custom-checkbox mr-md-3" data-toggle="tooltip" title="Select All">
                <input type="checkbox" @onchange="EventArgs => { CheckAll(EventArgs.Value); }" class="custom-control-input" id="EXAMPLESELECTALL">
                <label class="custom-control-label" for="EXAMPLESELECTALL"><span class="sr-only">Select All</span></label>
            </div>
            <div class="app-posts-actions btn-group mr-2" role="group" aria-label="First group">
                <button type="button" @onclick="(async ()=> await GroupAction(Models.GroupAction.Feature))" class="btn btn-light" data-toggle="tooltip" title="Featured">
                    <svg class="bi bi-star-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                    </svg>
                </button>
                <button type="button" @onclick="(async ()=> await GroupAction(Models.GroupAction.Publish))" class="btn btn-light" data-toggle="tooltip" title="Publish">
                    <svg class="bi bi-check" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.236.236 0 0 1 .02-.022z" />
                    </svg>
                </button>
                <button type="button" @onclick="(async ()=> await GroupAction(Models.GroupAction.Unpublish))" class="btn btn-light" data-toggle="tooltip" title="Archive">
                    <svg class="bi bi-archive-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M12.643 15C13.979 15 15 13.845 15 12.5V5H1v7.5C1 13.845 2.021 15 3.357 15h9.286zM6 7a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1H6zM.8 1a.8.8 0 0 0-.8.8V3a.8.8 0 0 0 .8.8h14.4A.8.8 0 0 0 16 3V1.8a.8.8 0 0 0-.8-.8H.8z" />
                    </svg>
                </button>
                <button type="button" @onclick="(async ()=> await GroupAction(Models.GroupAction.Delete))" class="btn btn-light" data-toggle="tooltip" title="Delete">
                    <svg class="bi bi-trash-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5a.5.5 0 0 0-1 0v7a.5.5 0 0 0 1 0v-7z" />
                    </svg>
                </button>
            </div>
            <div class="app-posts-search ml-auto d-lg-block d-none">
                <input @bind="SearchTerm" @onkeyup="SearchKeyPress" class="app-posts-search-input" type="search" placeholder="@Localizer["search"]">
                <button @onclick="(async () => await SearchPosts())" class="app-posts-search-button" type="button">
                    <svg class="bi bi-search app-posts-search-icon" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z" />
                        <path fill-rule="evenodd" d="M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z" />
                    </svg>
                </button>
            </div>
            <div class="dropdown app-posts-filters ml-auto ml-lg-3">
                <button class="btn btn-light dropdown-toggle" type="button" id="filterByStatus" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span>@FilterLabel</span>
                </button>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="filterByStatus">
                    <button @onclick="(async ()=> await Filter(PublishedStatus.All))" class="dropdown-item">@Localizer["all"]</button>
                    <button @onclick="(async ()=> await Filter(PublishedStatus.Drafts))" class="dropdown-item">@Localizer["draft", true]</button>
                    <button @onclick="(async ()=> await Filter(PublishedStatus.Published))" class="dropdown-item">@Localizer["published"]</button>
                    <button @onclick="(async ()=> await Filter(PublishedStatus.Featured))" class="dropdown-item">@Localizer["featured"]</button>
                </div>
            </div>
        </div>

        @if (pageListModel.Posts == null || pageListModel.Posts.Count() == 0)
        {
            <div class="notfound">@Localizer["empty"]</div>
        }

        <ul class="app-posts-list" aria-label="posts">
            @foreach (var post in pageListModel.Posts)
            {
                <li class="app-posts-item d-flex align-items-center">
                    @{
                        string title = post.Title.Length < 60 ? post.Title : post.Title.Substring(0, 57) + "...";
                        string pubStatus = post.IsPublished ? "published" : "draft";
                        string pubDate = post.IsPublished ? post.Published.ToFriendlyShortDateString() : "Draft";
                        string featured = post.Featured ? "is-featured" : "";
                    }
                    <div class="app-posts-item-select custom-control custom-checkbox mr-md-3">
                        <input type="checkbox" @bind="post.Selected" class="custom-control-input" id="EXAMPLE_@(post.Id)">
                        <label class="custom-control-label" for="EXAMPLE_@(post.Id)"><span class="sr-only">Select All</span></label>
                    </div>

                    <a class="app-posts-item-link" href="admin/editor?id=@post.Id">@title</a>
                    <span class="app-posts-item-date ml-auto d-none d-lg-block ml-3">@pubDate</span>
                    <button class="app-posts-item-status app-posts-item-status-@pubStatus ml-3" @onclick="(async () => await Publish(post.Id, post.IsPublished))" data-toggle="tooltip" title="Status">
                        <svg class="bi bi-circle-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="8" cy="8" r="8" />
                        </svg>
                    </button>
                    <button class="app-posts-item-featured @featured ml-3" @onclick="(async () => await Feature(post.Id, post.Featured))" data-toggle="tooltip" title="Featured">
                        <svg class="bi bi-star-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                        </svg>
                        <svg class="bi bi-star" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.523-3.356c.329-.314.158-.888-.283-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767l-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288l1.847-3.658 1.846 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.564.564 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z" />
                        </svg>

                    </button>
                    <a href="posts/@post.Slug" target="_blank" class="app-posts-item-external ml-3" data-toggle="tooltip" title="Link">
                        <svg class="bi bi-box-arrow-up-right" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M1.5 13A1.5 1.5 0 0 0 3 14.5h8a1.5 1.5 0 0 0 1.5-1.5V9a.5.5 0 0 0-1 0v4a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 0 0-1H3A1.5 1.5 0 0 0 1.5 5v8zm7-11a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-1 0V2.5H9a.5.5 0 0 1-.5-.5z" />
                            <path fill-rule="evenodd" d="M14.354 1.646a.5.5 0 0 1 0 .708l-8 8a.5.5 0 0 1-.708-.708l8-8a.5.5 0 0 1 .708 0z" />
                        </svg>
                    </a>
                </li>
            }
        </ul>

        @if (pageListModel.Pager != null && (pageListModel.Pager.ShowOlder || pageListModel.Pager.ShowNewer))
        {
            <ul class="pagination justify-content-center">
                @if (pageListModel.Pager.ShowOlder)
                {
                    <li class="item item-prev">
                        <a class="item-link" href="" @onclick="(async () => await LoadPage(pageListModel.Pager.Older))" @onclick:preventDefault>
                            <span class="item-icon oi oi-chevron-left" title="Older"></span>
                        </a>
                    </li>
                }
                <li class="item item-text"><span class="text-active">@pageListModel.Pager.CurrentPage</span><span>out of @pageListModel.Pager.LastPage</span></li>
                @if (pageListModel.Pager.ShowNewer)
                {
                    <li class="item item-next">
                        <a class="item-link" href="" @onclick="(async () => await LoadPage(pageListModel.Pager.Newer))" @onclick:preventDefault>
                            <span class="item-icon oi oi-chevron-right" title="Newer"></span>
                        </a>
                    </li>
                }
            </ul>
        }
    }

</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    PageListModel pageListModel { get; set; }
    protected string SearchTerm { get; set; }
    protected int PostId { get; set; }
    protected int CurrentPage { get; set; }
    protected string FilterLabel { get; set; }
    protected PublishedStatus FilterValue { get; set; }
    protected HttpRequest Request { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentPage = 1;
        FilterLabel = Localizer["all"];
        Request = HttpContextAccessor.HttpContext.Request;
        await LoadPosts();
    }

    protected async Task SearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchPosts();
        }
    }

    public async Task LoadPage(int page)
    {
        CurrentPage = page;
        await LoadPosts();
    }

    protected async Task SearchPosts()
    {
        CurrentPage = 1;
        await LoadPosts();
    }

    async Task LoadPosts()
    {
        try
        {
            var qString = $"?page={CurrentPage}";

            if (FilterValue == PublishedStatus.Drafts) qString += "&include=D";
            if (FilterValue == PublishedStatus.Published) qString += "&include=FP";
            if (FilterValue == PublishedStatus.Featured) qString += "&include=F";

            if (string.IsNullOrEmpty(SearchTerm))
            {
                pageListModel = await Http.GetJsonAsync<PageListModel>($"posts{qString}", Request);
            }
            else
            {
                pageListModel = await Http.GetJsonAsync<PageListModel>($"posts/search/{SearchTerm}{qString}", Request);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    public async Task Publish(int id, bool published)
    {
        try
        {
            var post = await Http.GetJsonAsync<PostItem>($"posts/{id}", Request);

            string pub = published ? "U" : "P";

            var msg = await Http.PutJsonAsync($"posts/publish?id={id}&flag={pub}", Request, post);

            Toaster.Success("Saved");
            await LoadPosts();
        }
        catch (Exception ex)
        {
            Toaster.Error(ex.Message);
        }
    }

    public async Task Feature(int id, bool featured)
    {
        try
        {
            var post = await Http.GetJsonAsync<PostItem>($"posts/{id}", Request);
            string flag = featured ? "U" : "F";

            await Http.PutJsonAsync($"posts/feature?id={id}&flag={flag}", Request, post);

            Toaster.Success("Saved");
            await LoadPosts();
        }
        catch (Exception ex)
        {
            Toaster.Error(ex.Message);
        }
    }

    public async Task Filter(PublishedStatus filter)
    {
        FilterValue = filter;
        switch (filter)
        {
            case PublishedStatus.Published:
                FilterLabel = Localizer["published"];
                break;
            case PublishedStatus.Drafts:
                FilterLabel = Localizer["draft", true];
                break;
            case PublishedStatus.Featured:
                FilterLabel = Localizer["featured"];
                break;
            default:
                FilterLabel = Localizer["all"];
                break;
        }
        CurrentPage = 1;
        await LoadPosts();
    }

    public void CheckAll(object checkValue)
    {
        bool isChecked = (bool)checkValue;
        pageListModel.Posts.ToList().ForEach(e => e.Selected = isChecked);
    }

    public async Task GroupAction(GroupAction action)
    {
        var selectedPosts = pageListModel.Posts.Where(p => p.Selected).ToList();
        if (selectedPosts.Any())
        {
            bool confirmed = false;
            foreach (var item in selectedPosts)
            {
                var post = await Http.GetJsonAsync<PostItem>($"posts/{item.Id}", Request);
                switch (action)
                {
                    case Models.GroupAction.Publish:
                        await Http.PutJsonAsync($"posts/publish?id={item.Id}&flag=P", Request, post);
                        break;
                    case Models.GroupAction.Unpublish:
                        await Http.PutJsonAsync($"posts/publish?id={item.Id}&flag=U", Request, post);
                        break;
                    case Models.GroupAction.Feature:
                        await Http.PutJsonAsync($"posts/feature?id={item.Id}&flag=F", Request, post);
                        break;
                    case Models.GroupAction.Delete:
                        if (!confirmed)
                        {
                            confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"{Localizer["confirm-delete"]}");
                            if (confirmed)
                            {
                                await Http.RemoveAsync($"posts/remove/{item.Id}", Request);
                            }
                        }
                        break;
                    default:
                        break;
                }
            }
            Toaster.Success(Localizer["completed"]);
            await LoadPosts();
        }
    }
}