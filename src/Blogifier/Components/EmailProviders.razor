@inject ILogger<EmailService> Logger
@inject IJsonStringLocalizer<EmailProviders> Localizer
@inject IToaster Toaster
@inject IHttpContextAccessor HttpContextAccessor
@inject CustomHttpClient Http

@if (EmailModel != null)
{
    <div class="app-settings-title">Newsletter Settings</div>
    <div class="app-newsletter-settings">
        <fieldset>
            <div class="form-group">
                <label class="form-control-label">@Localizer["name"]</label>
                <input class="form-control" type="text" @bind="EmailModel.FromName" />
            </div>
            <div class="form-group">
                <label class="form-control-label">@Localizer["email"]</label>
                <input class="form-control" type="text" @bind="EmailModel.FromEmail" />
            </div>
            <div class="form-group">
                <label class="form-control-label">@Localizer["email-provider"]</label>
                <select @bind="SelectedProvider" class="custom-select">
                    @if (EmailModel.Providers != null)
                    {
                        @foreach (var provider in EmailModel.Providers)
                        {
                            <option value="@provider.Key">@provider.Label</option>
                        }
                    }
                </select>
            </div>

            @if (EmailModel.SelectedProvider == EmailProvider.SendGrid)
            {
                <EditForm Model="@SendGridModel" OnValidSubmit="OnSendGridModelSave">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label class="form-control-label">@Localizer["sendgrid-key"]</label>
                        <input class="form-control" type="text" @bind="SendGridModel.ApiKey" />
                    </div>
                    <div class="form-submit-button">

                        <input type="submit" value="@Localizer["save"]" class="btn btn-brand" />
                    </div>
                </EditForm>
            }
            @if (EmailModel.SelectedProvider == EmailProvider.MailKit)
            {
                <EditForm Model="@MailKitModel" OnValidSubmit="OnMailKitModelSave">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label class="form-control-label">@Localizer["smtp-email"]</label>
                        <input class="form-control" type="text" @bind="MailKitModel.EmailAddress" placeholder="someone@gmail.com" />
                    </div>
                    <div class="form-group">
                        <label class="form-control-label">@Localizer["password"]</label>
                        <input class="form-control" type="password" @bind="MailKitModel.EmailPassword" />
                    </div>
                    <div class="form-group">
                        <label class="form-control-label">@Localizer["server"]</label>
                        <input class="form-control" type="text" @bind="MailKitModel.EmailServer" placeholder="smtp.gmail.com" />
                    </div>
                    <div class="form-group">
                        <label class="form-control-label">@Localizer["port"]</label>
                        <input class="form-control" type="text" @bind="MailKitModel.Port" />
                    </div>
                    <div class="form-submit-button">
                        <input type="submit" value="@Localizer["save"]" class="btn btn-brand" />
                    </div>
                </EditForm>
            }
        </fieldset>

        <div class="app-settings-title">Test Newsletter Settings</div>

        <fieldset>
            <div class="form-group">
                <label class="form-control-label">@Localizer["send-to"]</label>
                <input class="form-control" type="text" @bind="EmailModel.SendTo" placeholder="me@gmail.com" />
            </div>
            <div class="form-submit-button">
                <input type="button" value="@Localizer["send-test-email"]" @onclick="OnCheck" class="btn btn-brand" />
            </div>

            @if ((EmailModel.SelectedProvider == EmailProvider.MailKit && MailKitModel.Configured) ||
      (EmailModel.SelectedProvider == EmailProvider.SendGrid && SendGridModel.Configured))
            {
                <div class="alert alert bg-success">Configured</div>
            }
        </fieldset>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    protected HttpRequest Request { get; set; }
    protected EmailModel EmailModel { get; set; }
    protected SendGridModel SendGridModel { get; set; }
    protected MailKitModel MailKitModel { get; set; }
    private EmailProvider selectedProvider;

    public EmailProvider SelectedProvider
    {
        get { return selectedProvider; }
        set
        {
            selectedProvider = value;
            OnProviderChange();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Request = HttpContextAccessor.HttpContext.Request;
        EmailModel = await Http.GetJsonAsync<EmailModel>($"emails/emailmodel", Request);
        SelectedProvider = EmailModel.SelectedProvider;
        SendGridModel = await Http.GetJsonAsync<SendGridModel>($"emails/sendgrid", Request);
        MailKitModel = await Http.GetJsonAsync<MailKitModel>($"emails/mailkit", Request);
    }

    protected void OnProviderChange()
    {
        EmailModel.SelectedProvider = SelectedProvider;
    }

    protected async Task OnSendGridModelSave()
    {
        if (Verified())
        {
            SendGridModel.Configured = false;
            await Http.PostJsonAsync<SendGridModel>($"emails/sendgrid", Request, SendGridModel);
            await Http.PostJsonAsync<EmailModel>($"emails/emailmodel", Request, EmailModel);
            Toaster.Success(Localizer["completed"]);
        }
    }

    protected async Task OnMailKitModelSave()
    {
        if (Verified())
        {
            MailKitModel.Configured = false;
            await Http.PostJsonAsync<MailKitModel>($"emails/mailkit", Request, MailKitModel);
            await Http.PostJsonAsync<EmailModel>($"emails/emailmodel", Request, EmailModel);
            Toaster.Success(Localizer["completed"]);
        }
    }

    protected async Task OnCheck()
    {
        if (Verified())
        {
            var result = await Http.PutJsonAsync($"emails/testemail", Request, EmailModel);
            bool status = result.StatusCode == System.Net.HttpStatusCode.OK;

            if (EmailModel.SelectedProvider == EmailProvider.MailKit)
            {
                MailKitModel.Configured = status;
                await Http.PostJsonAsync<MailKitModel>($"emails/mailkit", Request, MailKitModel);
            }

            if (EmailModel.SelectedProvider == EmailProvider.SendGrid)
            {
                SendGridModel.Configured = status;
                await Http.PostJsonAsync<SendGridModel>($"emails/sendgrid", Request, SendGridModel);
            }

            if (status) Toaster.Success(Localizer["email-sent-success"]);
            else Toaster.Error($"Error: {result.StatusCode}");
        }
    }

    bool Verified()
    {
        if (string.IsNullOrEmpty(EmailModel.FromEmail) || string.IsNullOrEmpty(EmailModel.FromName))
        {
            Toaster.Error(Localizer["name-and-email-required"]);
            return false;
        }
        return true;
    }
}
