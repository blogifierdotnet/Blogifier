@inject IJsonStringLocalizer<Themes> Localizer
@inject IToaster Toaster
@inject IHttpContextAccessor HttpContextAccessor
@inject CustomHttpClient Http
<div class="app-settings-title">Themes Settings</div>
@if (CurrentTheme != null)
{
    <div class="app-themes">
        <div class="row">
            <div class="col-md-6 col-lg-4">
                <div class="app-themes-item app-themes-active">
                    <img src="@CurrentTheme.Cover" class="app-themes-cover" alt="@CurrentTheme.Title">
                    <div class="app-themes-title d-flex">
                        <span class="app-themes-name my-auto">@CurrentTheme.Title (current)</span>
                    </div>
                </div>
            </div>
            @foreach (var item in ThemeItems)
            {
                <div class="col-md-6 col-lg-4">
                    <div class="app-themes-item">
                        <img src="@item.Cover" class="app-themes-cover" alt="@item.Title">
                        <div class="app-themes-title d-flex">
                            <span class="app-themes-name my-auto">@item.Title</span>
                            <button type="button" class="btn btn-dark my-auto ml-auto" @onclick="()=> SelectTheme(item.Title)" @onclick:preventDefault>@Localizer["select"]</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<string> OnUpdate { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    protected HttpRequest Request { get; set; }

    List<ThemeItem> ThemeItems { get; set; }
    ThemeItem CurrentTheme { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Request = HttpContextAccessor.HttpContext.Request;
        await Load();
    }

    public async Task Load()
    {
        var blogSettings = await Http.GetJsonAsync<BlogItem>($"settings", Request);
        ThemeItems = new List<ThemeItem>();
        var allThemes = await Http.GetJsonAsync<IList<string>>($"themes/getall", Request);
        foreach (var theme in allThemes)
        {
            if (theme.ToLower() == blogSettings.Theme.ToLower())
            {
                CurrentTheme = new ThemeItem
                {
                    Title = theme.Capitalize(),
                    IsCurrent = (blogSettings.Theme.ToLower() == theme.ToLower()),
                    Cover = GetCover(theme)
                };
            }
            else
            {
                ThemeItems.Add(new ThemeItem
                {
                    Title = theme.Capitalize(),
                    IsCurrent = (blogSettings.Theme.ToLower() == theme.ToLower()),
                    Cover = GetCover(theme)
                });
            }
        }
        StateHasChanged();
    }

    protected async Task SelectTheme(string theme)
    {
        var blogSettings = await Http.GetJsonAsync<BlogItem>($"settings", Request);
        blogSettings.Theme = theme.ToLower();
        await Http.PostJsonAsync<BlogItem>($"settings", Request, blogSettings);

        Toaster.Success("Saved");
        await Load();
    }

    private string GetCover(string theme)
    {
        string slash = System.IO.Path.DirectorySeparatorChar.ToString();
        string file = $"{AppSettings.WebRootPath}{slash}themes{slash}{theme}{slash}screenshot.png";
        if (System.IO.File.Exists(file))
        {
            return $"themes/{theme}/screenshot.png";
        }
        return "admin/img/img-placeholder.png";
    }
}
