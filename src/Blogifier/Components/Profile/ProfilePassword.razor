@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.FeatureManagement

@inject CustomHttpClient Http
@inject IHttpContextAccessor HttpContextAccessor

@inject IJsonStringLocalizer<ProfilePassword> Localizer
@inject IToaster Toaster
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@inject NavigationManager NavigationManager
@inject IFeatureManager FeatureManager

@if (PwdModel != null)
{
    <EditForm Model="@PwdModel" OnValidSubmit="ChangePwd">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label class="form-control-label">@Localizer["password"]</label>
            <input class="form-control" type="password" @bind="PwdModel.OldPassword" />
        </div>
        <div class="form-group">
            <label class="form-control-label">@Localizer["new-password"]</label>
            <input class="form-control" type="password" @bind="PwdModel.NewPassword" />
        </div>
        <div class="form-group">
            <label class="form-control-label">@Localizer["confirm-password"]</label>
            <input class="form-control" type="password" @bind="PwdModel.ConfirmPassword" />
        </div>
        <div class="form-submit-button">
            <button type="submit" class="btn btn-brand">@Localizer["save"]</button>
        </div>
    </EditForm>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected ChangePasswordModel PwdModel { get; set; }
    protected HttpRequest Request { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Request = HttpContextAccessor.HttpContext.Request;
        await Load();
    }

    public async Task Load()
    {
        var authState = await AuthenticationStateTask;

        if (authState == null || !authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("account/login?returnUrl=/admin");
        }

        PwdModel = new ChangePasswordModel
        {
            UserName = authState.User.Identity.Name
        };
    }

    protected async Task ChangePwd()
    {
        try
        {
            if (FeatureManager.IsEnabledAsync(nameof(AppFeatureFlags.DemoMode)).Result)
            {
                Toaster.Error("Running in demo mode - change password disabled");
            }
            else
            {
                var authState = await AuthenticationStateTask;
                var user = await UserManager.GetUserAsync(authState.User);
                var result = await UserManager.ChangePasswordAsync(user, PwdModel.OldPassword, PwdModel.NewPassword);

                if (!result.Succeeded)
                {
                    Toaster.Error("Error changing password");
                }
                else
                {
                    Toaster.Success(Localizer["saved"]);
                }
            }
        }
        catch (Exception ex)
        {
            Toaster.Error(ex.Message);
        }
    }
}
