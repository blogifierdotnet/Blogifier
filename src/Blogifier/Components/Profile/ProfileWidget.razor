@inject CustomHttpClient Http
@inject IHttpContextAccessor HttpContextAccessor

@inject IJsonStringLocalizer<ProfileWidget> Localizer
@inject NavigationManager NavigationManager


<div class="app-widget app-notifications">
    <div class="app-notifications-clock">
        <span id="clock"></span> <span id="clock-day"></span>, <span id="clock-month"></span>
    </div>
</div>





@*@if (Author != null)
    {
        <img id="profile-avatar" width="32" src="@Author.Avatar" class="app-widget-profile-avatar" alt="@Author.DisplayName">
        <span class="widget-profile-name">@Author.DisplayName</span>
        <span class="widget-profile-email">@Author.Email</span>
        <button class="btn btn-primary" @onclick="ShowEditor">Edit Profile</button>
    }*@

@if (Edit)
{
    @Localizer["profile"]
    <ProfileAuthor />
    <hr />
    @Localizer["social-accounts"]
    <SocialAccounts Level="author" />
    <hr />
    @Localizer["change-password"]
    <ProfilePassword />
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected Author Author { get; set; }
    protected bool Edit { get; set; }
    protected HttpRequest Request { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Request = HttpContextAccessor.HttpContext.Request;
        await Load();
    }

    public async Task Load()
    {
        var authState = await AuthenticationStateTask;

        if (authState == null || !authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("account/login?returnUrl=/admin");
        }

        Author = await Http.GetJsonAsync<Author>($"authors/{authState.User.Identity.Name}", Request);
    }

    protected void ShowEditor()
    {
        Edit = true;
        StateHasChanged();
    }

    protected async Task HideEditor()
    {
        Edit = false;
        await Load();
        StateHasChanged();
    }

}