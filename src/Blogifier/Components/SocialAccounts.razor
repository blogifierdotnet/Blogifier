@inject IJsonStringLocalizer<SocialAccounts> Localizer
@inject IToaster Toaster
@inject IHttpContextAccessor HttpContextAccessor
@inject CustomHttpClient Http

<div class="app-settings-title">@Localizer["social-accounts"]</div>
@if (SocialFields != null)
{
    <div class="app-social">

        <EditForm Model="@CurrentField" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="app-social-form">
                <div class="input-group mb-3">
                    <input type="text" @bind="CurrentField.Title" class="form-control" placeholder="@Localizer["name"]">
                    <input type="text" @bind="CurrentField.Content" class="form-control" placeholder="@Localizer["content"]">
                    <div class="input-group-append">
                        <button class="btn btn-outline-secondary px-md-5" type="submit">@Localizer["save"]</button>
                    </div>
                </div>
            </div>
        </EditForm>


        @if (SocialFields.Any())
        {
            <ul class="app-social-list" aria-label="drafts">
                @foreach (var field in SocialFields)
                {
                    <li class="bf-list-item d-flex align-items-center">
                        <i class="fas @field.Icon" aria-hidden="true"></i>
                        <span>@field.Title</span>
                        <a href="#" class="ml-auto">@field.Rank</a>
                        <a href="#" class="ml-3" @onclick="(() => RankField(field.Id, true))" @onclick:preventDefault>
                            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-chevron-up" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z" />
                            </svg>
                        </a>
                        <a href="#" class="ml-3" @onclick="(() => RankField(field.Id, false))" @onclick:preventDefault>
                            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-chevron-down" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" />
                            </svg>
                        </a>
                        <a href="#" target="_blank" class="ml-3" @onclick="(() => RemoveField(field.Id))" @onclick:preventDefault>
                            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-trash" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                            </svg>
                        </a>
                    </li>
                }
            </ul>
        }
        else
        {
            <div>@Localizer["empty"]</div>
        }
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    protected HttpRequest Request { get; set; }
    [Parameter]
    public string Level { get; set; }

    protected List<SocialField> SocialFields { get; set; }
    protected SocialField CurrentField { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Request = HttpContextAccessor.HttpContext.Request;
        await Load();
    }

    protected async Task Load()
    {
        int authorId = await GetAuthorId();
        CurrentField = new SocialField { AuthorId = authorId };
        SocialFields = await Http.GetJsonAsync<List<SocialField>>($"customfields/socialaccounts?authorId={authorId}", Request);
        StateHasChanged();
    }

    protected async Task Save()
    {
        if (string.IsNullOrEmpty(CurrentField.Title) || string.IsNullOrEmpty(CurrentField.Content))
        {
            Toaster.Error("Name and content required");
        }
        else
        {
            var newField = new SocialField
            {
                Title = CurrentField.Title.Capitalize(),
                Content = CurrentField.Content,
                Icon = $"fa-{CurrentField.Title.ToLower()}",
                AuthorId = await GetAuthorId(),
                Name = $"social|{CurrentField.Title.ToLower()}|1",
                Rank = 1
            };
            await Http.PostJsonAsync<SocialField>($"customfields", Request, newField);
            await Load();
            Toaster.Success("Updated");
        }
    }

    protected async Task RemoveField(int id)
    {
        try
        {
            await Http.RemoveAsync($"customfields/remove/{id}", Request);
            Toaster.Success(Localizer["completed"]);
            await Load();
        }
        catch (Exception ex)
        {
            Toaster.Error(ex.Message);
        }
    }

    protected async Task RankField(int id, bool up)
    {
        var existing = await Http.GetJsonAsync<SocialField>($"customfields/byid/{id}", Request);
        if (existing != null)
        {
            var fieldArray = existing.Name.Split('|');
            if (fieldArray.Length > 2)
            {
                int oldRank = int.Parse(fieldArray[2]);
                int newRank = 1;

                if (up && oldRank > 1) newRank = oldRank - 1;
                if (!up) newRank = oldRank + 1;

                var toUpdate = new SocialField
                {
                    Id = id,
                    Title = fieldArray[1].Capitalize(),
                    Icon = $"fa-{fieldArray[1]}",
                    Rank = newRank,
                    Name = $"{fieldArray[0]}|{fieldArray[1]}|{newRank}",
                    AuthorId = existing.AuthorId,
                    Content = existing.Content
                };
                await Http.PostJsonAsync<SocialField>($"customfields/socialaccounts", Request, toUpdate);
                Toaster.Success(Localizer["completed"]);
                await Load();
            }
            else
            {
                Toaster.Error($"Error - unexpected field format: {existing.Name}");
            }
        }
        else
        {
            Toaster.Error($"Error moving field #{id}");
        }
    }

    private async Task<int> GetAuthorId()
    {
        int authorId = 0;
        if (Level == "author")
        {
            var authState = await AuthenticationStateTask;
            var author = await Http.GetJsonAsync<Author>($"authors/{authState.User.Identity.Name}", Request);
            return author.Id;
        }
        return authorId;
    }
}
